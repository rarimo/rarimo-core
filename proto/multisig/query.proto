syntax = "proto3";
package rarimo.rarimocore.multisig;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "multisig/params.proto";
import "multisig/group.proto";
import "multisig/proposal.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/rarimo/rarimo-core/x/multisig/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/params";
  }

  rpc GroupAll(QueryAllGroupRequest) returns (QueryAllGroupResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/group";
  }

  rpc Group(QueryGetGroupRequest) returns (QueryGetGroupResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/group/{account}";
  }

  rpc Proposal(QueryGetProposalRequest) returns (QueryGetProposalResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/proposal/{proposalId}";
  };

  rpc ProposalAll(QueryAllProposalRequest) returns (QueryAllProposalResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/proposal";
  };

  rpc Vote(QueryGetVoteRequest) returns (QueryGetVoteResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/vote/{proposalId}/{voter}";
  };

  rpc VoteAll(QueryAllVoteRequest) returns (QueryAllVoteResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/vote";
  };

  // VotesByProposal queries a vote by proposal.
  rpc VotesByProposal(QueryVotesByProposalRequest) returns (QueryVotesByProposalResponse) {
    option (google.api.http).get = "/rarimo/rarimo-core/multisig/vote/{proposalId}";
  };

  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryAllGroupRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGroupResponse {
  repeated Group group = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetGroupRequest {
  string account = 1;
}

message QueryGetGroupResponse {
  Group group = 1 [(gogoproto.nullable) = false];
}

message QueryGetProposalRequest {
  uint64 proposalId = 1;
}

message QueryGetProposalResponse {
  Proposal proposal = 1 [(gogoproto.nullable) = false];
}

message QueryAllProposalRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProposalResponse {
  repeated Proposal proposal = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetVoteRequest {
  uint64 proposalId = 1;
  string voter = 2;
}

message QueryGetVoteResponse {
  Vote vote = 1 [(gogoproto.nullable) = false];
}

message QueryAllVoteRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllVoteResponse {
  repeated Vote vote = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryVotesByProposalRequest {
  uint64 proposalId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryVotesByProposalResponse {
  repeated Vote vote = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}


// this line is used by starport scaffolding # 3
