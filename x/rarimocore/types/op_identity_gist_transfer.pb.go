// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rarimocore/op_identity_gist_transfer.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/rarimo/rarimo-core/x/tokenmanager/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IdentityGISTTransfer struct {
	// Hex 0x
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	Chain    string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// Hex 0x
	GISTHash string `protobuf:"bytes,3,opt,name=GISTHash,proto3" json:"GISTHash,omitempty"`
	// Dec
	GISTCreatedAtTimestamp string `protobuf:"bytes,5,opt,name=GISTCreatedAtTimestamp,proto3" json:"GISTCreatedAtTimestamp,omitempty"`
	GISTCreatedAtBlock     string `protobuf:"bytes,6,opt,name=GISTCreatedAtBlock,proto3" json:"GISTCreatedAtBlock,omitempty"`
	// HEX 0x
	ReplacedGISTHash string `protobuf:"bytes,7,opt,name=replacedGISTHash,proto3" json:"replacedGISTHash,omitempty"`
}

func (m *IdentityGISTTransfer) Reset()         { *m = IdentityGISTTransfer{} }
func (m *IdentityGISTTransfer) String() string { return proto.CompactTextString(m) }
func (*IdentityGISTTransfer) ProtoMessage()    {}
func (*IdentityGISTTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bbb4947a344a09f5, []int{0}
}
func (m *IdentityGISTTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdentityGISTTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdentityGISTTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdentityGISTTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentityGISTTransfer.Merge(m, src)
}
func (m *IdentityGISTTransfer) XXX_Size() int {
	return m.Size()
}
func (m *IdentityGISTTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentityGISTTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_IdentityGISTTransfer proto.InternalMessageInfo

func (m *IdentityGISTTransfer) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *IdentityGISTTransfer) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *IdentityGISTTransfer) GetGISTHash() string {
	if m != nil {
		return m.GISTHash
	}
	return ""
}

func (m *IdentityGISTTransfer) GetGISTCreatedAtTimestamp() string {
	if m != nil {
		return m.GISTCreatedAtTimestamp
	}
	return ""
}

func (m *IdentityGISTTransfer) GetGISTCreatedAtBlock() string {
	if m != nil {
		return m.GISTCreatedAtBlock
	}
	return ""
}

func (m *IdentityGISTTransfer) GetReplacedGISTHash() string {
	if m != nil {
		return m.ReplacedGISTHash
	}
	return ""
}

func init() {
	proto.RegisterType((*IdentityGISTTransfer)(nil), "rarimo.rarimocore.rarimocore.IdentityGISTTransfer")
}

func init() {
	proto.RegisterFile("rarimocore/op_identity_gist_transfer.proto", fileDescriptor_bbb4947a344a09f5)
}

var fileDescriptor_bbb4947a344a09f5 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0x41, 0x4b, 0x33, 0x31,
	0x10, 0x6d, 0xbe, 0x8f, 0x56, 0xcd, 0x49, 0x42, 0xd1, 0xa5, 0x48, 0x10, 0x4f, 0x52, 0x70, 0x57,
	0x10, 0xbc, 0x5b, 0x0f, 0x5a, 0x8f, 0xda, 0x93, 0x97, 0x92, 0x66, 0xc7, 0xdd, 0xd0, 0x26, 0x59,
	0xb2, 0x23, 0xd8, 0x7f, 0xe1, 0xcf, 0xf2, 0xd8, 0xa3, 0x47, 0xd9, 0xfd, 0x13, 0x1e, 0x65, 0x93,
	0xb5, 0x56, 0xd4, 0x53, 0xde, 0x9b, 0xf7, 0x5e, 0x66, 0x98, 0xa1, 0x43, 0x27, 0x9c, 0xd2, 0x56,
	0x5a, 0x07, 0x89, 0x2d, 0xa6, 0x2a, 0x05, 0x83, 0x0a, 0x97, 0xd3, 0x4c, 0x95, 0x38, 0x45, 0x27,
	0x4c, 0xf9, 0x00, 0x2e, 0x2e, 0x9c, 0x45, 0xcb, 0x0e, 0x82, 0x37, 0xfe, 0x8a, 0x6c, 0xc0, 0xc1,
	0x3e, 0xda, 0x39, 0x18, 0x2d, 0x8c, 0xc8, 0xc0, 0x25, 0x0a, 0x41, 0x87, 0xd8, 0xa0, 0x9f, 0xd9,
	0xcc, 0x7a, 0x98, 0x34, 0x28, 0x54, 0x8f, 0xde, 0x09, 0xed, 0x8f, 0xdb, 0x6e, 0x57, 0xe3, 0xbb,
	0xc9, 0xa4, 0xed, 0xc5, 0x06, 0x74, 0x5b, 0x5a, 0x83, 0x4e, 0x48, 0x8c, 0xc8, 0x21, 0x39, 0xde,
	0xb9, 0x5d, 0x73, 0xd6, 0xa7, 0x5d, 0x99, 0x0b, 0x65, 0xa2, 0x7f, 0x5e, 0x08, 0xa4, 0x49, 0x34,
	0x3f, 0x5c, 0x8b, 0x32, 0x8f, 0xfe, 0x87, 0xc4, 0x27, 0x67, 0xe7, 0x74, 0xaf, 0xc1, 0x97, 0x0e,
	0x04, 0x42, 0x7a, 0x81, 0x13, 0xa5, 0xa1, 0x44, 0xa1, 0x8b, 0xa8, 0xeb, 0x9d, 0x7f, 0xa8, 0x2c,
	0xa6, 0xec, 0x9b, 0x32, 0x5a, 0x58, 0x39, 0x8f, 0x7a, 0x3e, 0xf3, 0x8b, 0xc2, 0x86, 0x74, 0xd7,
	0x41, 0xb1, 0x10, 0x12, 0xd2, 0xf5, 0x2c, 0x5b, 0xde, 0xfd, 0xa3, 0x3e, 0xba, 0x79, 0xa9, 0x38,
	0x59, 0x55, 0x9c, 0xbc, 0x55, 0x9c, 0x3c, 0xd7, 0xbc, 0xb3, 0xaa, 0x79, 0xe7, 0xb5, 0xe6, 0x9d,
	0xfb, 0xd3, 0x4c, 0x61, 0xfe, 0x38, 0x8b, 0xa5, 0xd5, 0x49, 0x58, 0x6d, 0xfb, 0x9c, 0xf8, 0x03,
	0x3d, 0x25, 0x1b, 0xd7, 0xc2, 0x65, 0x01, 0xe5, 0xac, 0xe7, 0xb7, 0x79, 0xf6, 0x11, 0x00, 0x00,
	0xff, 0xff, 0x26, 0xc0, 0x0b, 0x5b, 0xc8, 0x01, 0x00, 0x00,
}

func (m *IdentityGISTTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdentityGISTTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdentityGISTTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReplacedGISTHash) > 0 {
		i -= len(m.ReplacedGISTHash)
		copy(dAtA[i:], m.ReplacedGISTHash)
		i = encodeVarintOpIdentityGistTransfer(dAtA, i, uint64(len(m.ReplacedGISTHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.GISTCreatedAtBlock) > 0 {
		i -= len(m.GISTCreatedAtBlock)
		copy(dAtA[i:], m.GISTCreatedAtBlock)
		i = encodeVarintOpIdentityGistTransfer(dAtA, i, uint64(len(m.GISTCreatedAtBlock)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.GISTCreatedAtTimestamp) > 0 {
		i -= len(m.GISTCreatedAtTimestamp)
		copy(dAtA[i:], m.GISTCreatedAtTimestamp)
		i = encodeVarintOpIdentityGistTransfer(dAtA, i, uint64(len(m.GISTCreatedAtTimestamp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.GISTHash) > 0 {
		i -= len(m.GISTHash)
		copy(dAtA[i:], m.GISTHash)
		i = encodeVarintOpIdentityGistTransfer(dAtA, i, uint64(len(m.GISTHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintOpIdentityGistTransfer(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintOpIdentityGistTransfer(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOpIdentityGistTransfer(dAtA []byte, offset int, v uint64) int {
	offset -= sovOpIdentityGistTransfer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *IdentityGISTTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovOpIdentityGistTransfer(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovOpIdentityGistTransfer(uint64(l))
	}
	l = len(m.GISTHash)
	if l > 0 {
		n += 1 + l + sovOpIdentityGistTransfer(uint64(l))
	}
	l = len(m.GISTCreatedAtTimestamp)
	if l > 0 {
		n += 1 + l + sovOpIdentityGistTransfer(uint64(l))
	}
	l = len(m.GISTCreatedAtBlock)
	if l > 0 {
		n += 1 + l + sovOpIdentityGistTransfer(uint64(l))
	}
	l = len(m.ReplacedGISTHash)
	if l > 0 {
		n += 1 + l + sovOpIdentityGistTransfer(uint64(l))
	}
	return n
}

func sovOpIdentityGistTransfer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOpIdentityGistTransfer(x uint64) (n int) {
	return sovOpIdentityGistTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IdentityGISTTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpIdentityGistTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdentityGISTTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdentityGISTTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GISTHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GISTHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GISTCreatedAtTimestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GISTCreatedAtTimestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GISTCreatedAtBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GISTCreatedAtBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplacedGISTHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplacedGISTHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpIdentityGistTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOpIdentityGistTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpIdentityGistTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpIdentityGistTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpIdentityGistTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOpIdentityGistTransfer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOpIdentityGistTransfer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOpIdentityGistTransfer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOpIdentityGistTransfer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpIdentityGistTransfer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOpIdentityGistTransfer = fmt.Errorf("proto: unexpected end of group")
)
